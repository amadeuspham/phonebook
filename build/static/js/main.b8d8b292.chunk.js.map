{"version":3,"sources":["services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","res","data","catch","err","console","log","newObject","post","id","delete","newContact","put","Notification","message","status","className","Person","person","handleRemove","name","number","onClick","Persons","filtering","filteredContacts","persons","map","key","FilterBar","filterStatus","setFilterStatus","filterByName","value","filterName","onChange","event","target","PersonForm","props","handleSubmit","newName","handleNameChange","newPhone","handlePhoneChange","onSubmit","type","App","useState","setPersons","setNewName","setNewPhone","setFilteredContacts","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","phoneService","setTimeout","nameInput","filtered","filter","toLowerCase","includes","preventDefault","existing","checkPerson","find","findExisting","window","confirm","remainingPerson","concat","returnedPerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b8d8b292.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const req = axios.get(baseUrl)\n  return req\n  \t.then(res => res.data)\n\t  .catch(err => {\n\t    console.log(err);\n\t  });\n}\n\nconst create = newObject => {\n  const req = axios.post(baseUrl, newObject)\n  return req\n  \t.then(res => res.data)\n\t  .catch(err => {\n\t    console.log(err);\n\t  });\n}\n\nconst remove = (id) => {\n  const req = axios.delete(`${baseUrl}/${id}`)\n  return req\n  \t.then(res => res)\n\t  .catch(err => {\n\t    console.log(err);\n\t  });\n}\n\nconst update = (id, newContact) => {\n\tconst req = axios.put(`${baseUrl}/${id}`, newContact)\n  return req.then(res => res.data);\n}\n\nexport default { \n  getAll, \n  create, \n  remove,\n  update,\n}","import React, { useState, useEffect } from 'react';\nimport phoneService from './services/phonebook';\nimport './App.css'\n\nconst Notification = ({ message, status }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={status}>\n      {message}\n    </div>\n  )\n}\n\nconst Person = ({person, handleRemove}) => {\n  return (\n    <p>\n    {person.name}: {person.number} \n    <button onClick={() => handleRemove(person.id, person.name)}>remove</button>\n    </p>\n  );\n}\n\nconst Persons = ({filtering, filteredContacts, persons, handleRemove}) => {\n  return (\n    <div>\n      {filtering \n        ? filteredContacts.map(person => \n          <Person key={person.name} person={person} handleRemove={handleRemove}/>\n        )\n        : persons.map(person => \n          <Person key={person.name} person={person} handleRemove={handleRemove}/>\n        )\n      }\n    </div>\n  );\n}\n\nconst FilterBar = ({filterStatus, setFilterStatus, filterByName}) => {\n  const handleFilterChange = (event) => {\n    if (event.target.value === '') {\n      setFilterStatus({\n        filterName: '',\n        filtering: false,\n      });\n    } else {\n      setFilterStatus({\n        filterName: event.target.value,\n        filtering: true,\n      });\n      filterByName(event.target.value);\n    }\n  }\n\n  return (\n    <div>\n      <p>Filter by name: </p>\n      <input value={filterStatus.filterName} onChange={handleFilterChange}/>\n    </div>\n  );\n}\n\nconst PersonForm = (props) => {\n  const {handleSubmit, newName, handleNameChange, newPhone, handlePhoneChange} = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange}/>\n      </div>\n      <div>\n        number: <input value={newPhone} onChange={handlePhoneChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ filterStatus, setFilterStatus ] = useState({\n    filterName: '',\n    filtering: false,\n  })\n  const [ filteredContacts, setFilteredContacts ] = useState([])\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    phoneService\n      .getAll()\n      .then(persons => setPersons(persons))\n      .catch(err => {\n        setErrorMessage(`Enable to fetch contacts`)\n        setTimeout(() => {setErrorMessage(null)}, 5000)\n      })\n  }, [])\n\n  const findExisting = (persons, checkPerson) => {\n    return persons.find(person => person.name === checkPerson.name);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const person = {\n      name: newName,\n      number: newPhone,\n    }\n\n    const existing = findExisting(persons, person)\n\n    if (existing) {\n      const willReplace = window.confirm(`${newName} already exists. Do you want to replace the current phone number?`);\n      if (willReplace) {\n        phoneService\n          .update(existing.id, person)\n          .then(newContact => {\n            setPersons(persons.map(person => person.id !== existing.id ? person : newContact))\n            setNewName('')\n            setNewPhone('')\n            setSuccessMessage(`Updated ${person.name}'s number`)\n            setTimeout(() => {setSuccessMessage(null)}, 5000)\n          })\n          .catch(err => {\n            setErrorMessage(`Info about ${person.name} was already removed`)\n            setTimeout(() => {setErrorMessage(null)}, 5000)\n            setNewName('')\n            setNewPhone('')\n            setPersons(persons.filter(remainingPerson => remainingPerson.name !== person.name))\n          })\n      } else {\n        return;\n      }\n    } else {\n      setPersons(persons.concat(person))\n      setNewName('')\n      setNewPhone('')\n      phoneService\n        .create(person)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewPhone('')\n          setSuccessMessage(`Added ${person.name}`)\n          setTimeout(() => {setSuccessMessage(null)}, 5000)\n        })\n        .catch(err => {\n          setErrorMessage(`Unable to add ${person.name} to phonebook`)\n          setTimeout(() => {setErrorMessage(null)}, 5000)\n        })\n    }\n  }\n\n  const filterByName = (nameInput) => {\n    const filtered = persons.filter(person => person.name.toLowerCase().includes(nameInput.toLowerCase()))\n    setFilteredContacts(filtered);\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value);\n  }\n\n  const handleRemove = (id, name) => {\n    const willDelete = window.confirm(`Are you sure you want to delete ${name}?`);\n    if (willDelete) {\n      phoneService\n        .remove(id)\n        .then(res => {\n          setPersons(persons.filter(person => person.id !== id))\n          setSuccessMessage(`Removed ${name}`)\n          setTimeout(() => {setSuccessMessage(null)}, 5000)\n        })\n        .catch(err => {\n          setErrorMessage(`Unable to delete ${name}`)\n          setTimeout(() => {setErrorMessage(null)}, 5000)\n        })\n    } else {\n      return;\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage} status='success'/>\n      <Notification message={errorMessage} status='error'/>\n      <FilterBar filterStatus={filterStatus} setFilterStatus={setFilterStatus} filterByName={filterByName}/>\n      <h2>Add a new contact</h2>\n      <PersonForm \n        handleSubmit={handleSubmit} \n        newName={newName}\n        handleNameChange={handleNameChange}\n        newPhone={newPhone}\n        handlePhoneChange={handlePhoneChange}\n      />\n      <h2>Numbers</h2>\n      <Persons \n        filtering={filterStatus.filtering} \n        filteredContacts={filteredContacts} \n        persons={persons}\n        handleRemove={handleRemove}\n      />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}